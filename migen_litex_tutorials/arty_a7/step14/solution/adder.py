from migen import *

from litex.soc.interconnect import stream

# This is the module generated by litex_read_verilog.
# We can't use it directly because it doesn't have
# stream endpoints.
# We could add endpoints directly here but lets do this in
# another module (StreamAddOne)

class stream_adder(Module):
    def __init__(self):
        self.sink_valid = Signal()
        self.sink_last = Signal()
        self.sink_data = Signal(8)
        self.sink_ready = Signal()
        self.source_valid = Signal()
        self.source_last = Signal()
        self.source_data = Signal(8)
        self.source_ready = Signal()

        # # #

        self.specials += Instance("stream_adder",
            i_sink_valid=self.sink_valid,
            i_sink_last=self.sink_last,
            i_sink_data=self.sink_data,
            o_sink_ready=self.sink_ready,
            o_source_valid=self.source_valid,
            o_source_last=self.source_last,
            o_source_data=self.source_data,
            i_source_ready=self.source_ready,
        )

class StreamAddOne(Module):
    def __init__(self):
        # Stream interfaces
        self.sink   = sink = stream.Endpoint([("data", 8)])
        self.source = source = stream.Endpoint([("data", 8)])

        # # #

        self.submodules.adder = adder = stream_adder()

        self.comb += [
            adder.sink_valid.eq(sink.valid),
            adder.sink_last.eq(sink.last),
            adder.sink_data.eq(sink.data),
            sink.ready.eq(adder.sink_ready),
            source.valid.eq(adder.source_valid),
            source.last.eq(adder.source_last),
            source.data.eq(adder.source_data),
            adder.source_ready.eq(source.ready)
        ]

